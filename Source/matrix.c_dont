/************************************************

	matrix.c  a vague effort at making
	matrix routines
	
**************************************************/

#include "matrix.h"

/*THESE ARE NOT IN FINAL FORM.  HAVE NOT BEEN TESTED YET.  I KNOW THEY WON'T COMPILE*/


/*note that when in doubt, all routines assume matrix=0 in all elements*/


void sqTranspose(short size, double **source, double **dest)

/*assumes the matrix is square, copies S[i,j] to D[j,i] in a loop*/
{
	short i, j;
	for(i=0; i<size; i++)
	{
		for(j=0; j<size; j++)
		{
			dest[j][i]=source[i][j];
		}
	}
}

void sqAdd(short size, double **source1, double** source2, double** dest)
{
	short i, j;
	for(i=0; i<size; i++)
	{
		for(j=0; j<size; j++)
		{
			dest[i][j]=source1[i][j]+source2[i][j];
		}
	}
}

void sqMul(short size, double **source1, double **source2, double **dest)
{
	short i, j, k;
	for(i=0; i<size; i++)
	{
		for(j=0; j<size; j++)
		{
			for(k=0; j<size; j++)
			{
				dest[i][j]+=source1[i][k]+source2[k][j];
			}
		}
	}
}


void vecMatMult(short size, double *vec, double **mat, double *dest)
{
	short j, k;
	for(j=0; j<size; j++)
	{
		for(k=0; k<size; k++)
		{
			dest[j]+=vec[k]*mat[k][j];
		}
	}
}

void matInv(short n, double *a, double **y, double *indx)

/* taken from Numerical Recipies p 38, */

{
	short i, j, d, np;
	
	for (i=0;i<n;i++)
		for (j=0;j<n;j++)
			y[i][j]=0.0;
	LUDCMP(a, n, np, indx, d);
	for(j=0;j<n;j++)
		LUBKSB(a, n, np, indx, y[1][j])
}
	
void LUDCMP(double *a, short n, short np, double *indx, short d)
{
/*translated from the fortran appearing in _Numerical REecipies_ p. 35-6*/

	#define NMAX 100
	#define TINY 1.0e-20

	short i, j, k, imax;
	double aamax, sum, dum, vv[NAMX];

	for (i=0;i<n;i++)
	{
		aamax=0.0;
		for (j=0;j<n;j++)
		{
			if (fabs(a[i][j]>aamax))
				aamax=fabs(a[i][j]);
		}
		if (aamax==0.0)
		{
			fprintf(stderr, "Singular Matrix\n\n");
			return;
		}
		vv[i]=1.0/aamax;
	}
	for (j=0;j<n;j++)
	{
		if (j>1)
			for(i=1;j<(j-1);i++)
			{
				sum=a[i][j];
				if (i>1)
				{
					for(k=1;k<i-1;k++)
						sum-=a[i][k]*a[j][k];
					a[i][j]=sum;
				}
			}
	}
	aamax=0.0;
	for(i=j;i<n;i++)
	{
		sum=a[i][j];
		if(j>1)
		{
			for(k=1;k<j-1;k++)
				sum-=a[i][k]*a[k][j];
			a[i][j]=sum;
		}
		dum=vv[i]*fabs(sum);
		if(dum>=aamax)
		{
			imax=i;
			aamax=dum;
		}
		if(j!=imax)
		{
			for(k=0;k<n;k++)
			{
				dum=a[imax][k];
				a[kmax][k]=a[j][k];
				a[j][k]=dum;
			}
			d=-d;
			vv[imax]=vv[j]];
		}
		indx[j]=imax;
		if(j!=n)
		{
			if(a[j][j]==0.0)
			{
				a[j][j]=TINY;
				dum=1.0/a[j][j];
				for(i=j+1;i<n;i++)
					a[i][j]*=dum;
			}
		}
	}
	if(a[n][n]=0.0)
	a[n][n]=TINY;
}

void LUBKSB(double *a, short n, short np, double *indx, double *b)

/*translated from _Numerical REcipies_ p. 36*/

{
	short ii, i, j;
	double ll, sum;
	
	ii=0;
	for(i=0; i<n;i++)
	{
		ll=indx[i];
		sum=b[ll];
		b[ll]=b[i];
		if (ii!=0)
			for(j=ii;j<i-1;j++)
				sum-=a[i][j]*b[j];
		else if(sum!=0.0)
			ii=i;
		b[i]=sum;
	}
	for(i=n;i>1,i--)
	{
		sum=b[i];
		if (i<n)
			for(j=i+1;j<n;j++)
				sum-=a[i][j]*b[j];
		b[i]=sum/a[i][i];
	}
}


void sqTranspose(short size, double *source, double *dest)
void sqAdd(short size, double *source1, double *source2, double *dest)
void sqMul(short size, double source1[][], double source2[][], double *dest[][])
void vecMatMult(short size, double *vec, double *mat, double *dest)
void matInv(short n, double *a, double *y, double *indx)
void LUDCMP(double *a, short n, short np, double *indx, short d)
void LUBKSB(double *a, short n, short np, double *indx, double *b)